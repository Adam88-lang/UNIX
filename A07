/*Adam Roos
ATR200002
10/12/2022
ASSIGNMENT 7*/
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#define MAXLINE 4096
void
err_exit(char* msg)
{
 perror(msg);
 exit(EXIT_FAILURE);
}
int
main(int argc, char* argv[])
{
 int pipefd1[2];
 int pipefd2[2];
 pid_t cpid1, cpid2, cpid3;
 if (argc != 2) {
 fprintf(stderr, "Usage: %s <pathname>\n", argv[0]);
 exit(EXIT_FAILURE);
 }
 if (pipe(pipefd1) == -1 || pipe(pipefd2) == -1) {
 err_exit("pipe");
 }
 cpid1 = fork();
 if (cpid1 == -1) {
 err_exit("fork");
 }
 if (cpid1 == 0) { /* child 1 */
 close(pipefd1[0]); /* close read end */
 close(pipefd2[0]);
 close(pipefd2[1]);
 if (dup2(pipefd1[1], STDOUT_FILENO) != STDOUT_FILENO) {
 err_exit("dup2 error to stdin");
 close(pipefd2[0]); /* close write end */
 }
 char* myargs[] = { "cat", 0 };
 execvp(myargs[0], myargs);
 err_exit("execvp failed");
 }
 cpid2 = fork();
 if (cpid2 == -1) {
 err_exit("fork2");
 }
 if (cpid2 == 0) { /* child 2 */
 close(pipefd1[1]);
 close(pipefd2[0]); /* close write end */
 if (
 dup2(pipefd1[0], STDIN_FILENO) != STDIN_FILENO
 || dup2(pipefd2[1], STDOUT_FILENO) != STDOUT_FILENO
 ) {
 err_exit("dup2 error to stdin");
 }
 close(pipefd1[0]); /* don't need this after dup2 */
 close(pipefd2[2]); /* don't need this after dup2 */
 /* call exec with appropriate arguments*/
 char* myargs[] = { "cat", 0 };
 execvp(myargs[0], myargs);
 err_exit("execvp failed");
 }
 cpid3 = fork();
 if (cpid3 == -1) {
 err_exit("fork2");
 }
 if (cpid3 == 0) { /* child 2 */
 close(pipefd1[1]);
 close(pipefd1[0]); /* close write end */
 close(pipefd2[1]); /* close write end */
